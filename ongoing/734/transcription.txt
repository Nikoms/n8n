hello everyone and welcome to software architecture Monday my name is Mark Richards and in this lesson number 157 we'll take another look at architecture decision records and specifically incorporating adrs or architecture decision records into existing systems and now you can get a listing of all of the lessons I do on software architecture Monday at my website at developer2architect.com lessons and from here you can watch the videos or you can watch them on YouTube as well a lot of material comes from these two books and as a matter of fact Neil Ford and I talked about architecture decision records and our fundamentals of software architecture but I wanted to talk about something that's not in that book you see um just for some background I have talked about architecture decision records before lesson 55 many many years ago I kind of talked about what are architecture decision records and then fairly recently um well I guess last year uh in lesson 141 I also talked about managing those architecture decision records and and talked about the status with that request for comment one which I'm very fond of so if you haven't seen those it might be good to actually view those videos before this one but if not and you're not familiar with architecture decision records it's worthwhile seeing these two videos so an architecture decision record just in a quick review is usually a short text file where every decision you make as an architect has a corresponding separate text file now I usually use ASCII doc but you can certainly use markdown plain text or any kind of other thing that you want to use but there's five main sections within an ADR the title of it the status which I talked about in lesson 141 proposed accepted superseded or request for comment the context which allows us to provide some short brief level of documentation about why I'm having to make this architecture decision and maybe some of the components involved and also the art the Alternatives that I considered the decision which is the justification part the most important part of an architecture decision record and finally the consequences section where we document our trade-offs so here's what happens as a matter of fact I just this week or I should say last week encountered this scenario so let's say we have a software architect who says you know I really like the idea of adrs and we all like these but but we've got an existing system I mean does it really even make sense to start using adrs or should I really wait until we have a new system in place and the short answer to that question is absolutely yes it still makes sense to start using adrs so of course then we have the follow-up question okay in that case how should I start using these let me show you and that's what the context of this lesson is is to how to and an approach to start leveraging and using adrs on existing systems to develop that kind of Brain Trust in that documentation and for an example to show you a concrete example let's take a student testing system now this is a system for standardized tests that all students in all grade schools take and it's when I say standardize it's the same test students show up like this and take a test that's managed by a proctor and then they get some results well this is the existing architecture so this system has been in place for let's say five years and notice here um if I kind of explain uh very quickly students go through a testing Gateway and they sign in using the sign in service I've got a fraud detection service here just to make sure that they're not cheating or maybe are taking a test for somebody else or signing in multiple times and taking a test over and over to get a better grade [Laughter] test taker here retrieves questions from the database caches them and then receives an answer and serves the next question up and then finally and let me erase some of this so you can actually see what the test taker here now then sends that information that answer to an auto grader where it's Auto graded via queues right here and then stored well if this is an existing system then how do we start incorporating adrs because decisions have already been made well this system may have been done a long time ago and unfortunately some of the people may have left but still may be there but we start looking at the architecture and asking questions for example um why does each service have its own separate database and kind of the form of microservices why not combine some of these or have a domain-based database or even a single database I I don't know why everything has a separate database because it is rather expensive and that would be a good candidate for an initial ADR as a matter of fact another question here that I might have if I were a new architect or just kind of wondering about the system why are the test questions separated from their corresponding answers I mean these things are intimately tied and we don't want those to get out of sync yet they're in two separate databases I I don't know why because well there's been talk about combining them but I'm not sure if I should or not that's a really good candidate for an architecture decision record for this existing system as a matter of fact we have this fraud service I might ask the question why am I why is that functionality separated in a different service why not just add that to the sign in service when a student signs in oh why take the time during a highly elastic system to go out to the fraud service I I don't know why that's another really good candidate for an architecture decision record for an existing system as a matter of fact these cues we have multiple of them and they're sharded and they're sharded in a specific way maybe by School District Maybe by school maybe this is random but why are they sharded in that manner and why do we have multiple cues that's a good candidate also for an ADR so you see in any given system you're probably curious about why something was done a certain way or you want to challenge it and so let me show you three core steps first what we try to do is to figure out why that particular decision was made hopefully we can track down who made that and talk to them and say why did you separate on the test questions from the answers and they probably have a good reason but no one knows it this is great to document but a lot of times uh the person who made that decision left the company several years ago and no one knows why it's just kind of the way it's always been we've never kind of questioned it well I'm going to question it now because we should have that documented why there might be a good reason so I might analyze this and say um why would I separate questions and answers and I'm like realizing oh for security because the answer keys for those tests are only accessed by the auto grader which there's no network path from the student and so that keeps those answers secure that's probably a good reason so I might or would generate an ADR for that but if I don't have a rationale like that I might think you know it's better consistency to have those joined and I might write an ADR with a different decision to join those databases together and see if it's challenged by anybody and then if that's the case I might write an architecture story then if it's necessary to change that decision and maybe combine those databases and this is the value of starting to look at your architecture of an existing system and sort of quote document it using architecture decision records and as a matter of fact if you're curious about architecture stories look at lesson 106 in software architecture Monday that's that's uh that's where I talk about those architecture stories if you're curious about what those are so you can kind of see the value here what we do as we take an existing system we don't have to go overly granular just to start out with some major decisions that were made major constructs in the system starts generating that documentation that Brain Trust about why certain things are done and by doing that this happens because now we've decided to break up this Auto grader right here and instead of doing inline Auto grading we've decided it would be much more efficient just to get that answer persisted and we'll do Post grading afterwards it doesn't have to we don't have to take the time to Auto grade it and it might speed up that process a bit now we can say ah you know since we're using adrs I should write an ADR for that decision because it does change the structure because we will be adding another service kind of that background service to then query those student answers and then we're sharing a database this is all structural and probably has some trade-offs involved with it and sure enough we write that ADR and now we're in the mode of architecture decision records and so this has been lesson 157 uh just showing you yes it still is important and useful to start taking an existing system and start creating some architecture decision records for some of the major architectural decisions and surprisingly it might uncover some things that we've always just accepted but there's trade-offs and we have no reason for doing it that way so I hope you enjoyed this lesson uh stay tuned in two more weeks for another lesson in software architecture Monday