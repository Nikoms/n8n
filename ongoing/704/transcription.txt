It was probably the craziest promotion I've ever experienced. This is David Fowler. He got promoted 11 times from an intern to a distinguished engineer, all at Microsoft. And I asked him about everything he learned along the way. A lot of things that get you to senior and maybe principal hurt you growing even further. What are the hidden unexpected perks of getting promoted to a distinguished engineer? Okay, the coolest part. Also, since he's been at Microsoft for over 17 years, I asked him for his unique perspectives about the company. Did you notice anything internally when Satia became CEO? The culture just changed completely. Right. Before you change roles, ask when the last reorg was. What's the thinking behind that advice? I'm curious what has kept you at Microsoft as long as you've been. Here's the full episode. First thing I wanted to go over is I think Microsoft's leveling system is a little bit unique compared to the other big tech companies. I see on levels.fy that the leveling system goes from 59 to 70 and there's almost two levels per uh title, you know, two levels per SD1, two levels for SD2, two in senior and it keeps going on all the way down to distinguished. Can you explain the Microsoft leveling system a little bit? Yeah. So, I I can't tell you why it starts at 59. I'm sure someone who's been there longer than me can tell you why it starts at 59. I believe there levels below that that aren't engineering roles and that's probably why it it has that system. Um, so when you join from college, you typically start at 59 or 60 depending on like how many how many times you intern, how well you did. There's different things that go into it. Um but entry is 59. So that's like sweet one at other companies. Um and then you you progress in level in Microsoft there are things called level bands. So then you say there's like two levels per title. The title tends to be the band. Um so you can say like I I am a junior engineer. You could be 59 or 60. So you can't you can't tell from someone's title which which notch they're at. Um so there's you know 59 60 is sweet one 50 61 62 is two and then 64 is um senior and then principal is actually three levels. I never really sat and thought about the why is it's done that way. I'm sure people that are really smart came up with those levels and why they're that that way. But the like principal level the the the band is so broad the depth of experience of the people in that band is immense. So you could be talking to someone who is like the last level of principal band that's been there forever or someone who just entered the principal band that just came from senior um and you wouldn't know from looking at their title. stuff and then beyond that is like no one knows right it's like levels partner um that has three bands and then there's beyond partners like technical fellow and sales engineer yep so yeah it's a it's a broad system you know yeah thanks for laying that out so yeah that's the thing I want to dig into is I mean you went through this entire thing you started all the way as an intern and you've been there for your entire career and you grew all the way to distinguished um so I kind of want to go over that story. Could you tell me the story behind you joining Microsoft? Yeah. So, I went to college at Florida Tech and I'm from Barbados. I left Barbados at like 18 like like everyone else that goes to college. Went to college. Funny enough, I was looking for colleges that had career fairs and I chose one that was closest to like our business. It's one flight home to the Caribbean from Florida. So, that was a really convenient place I got in. Um, funny enough, my first major was computer engineering cuz I thought I wanted to do software and hardware, but in the first class I was like, nope, not for me. I want to code. I have been coding since I was like 10 years old. So, that that's what I want to do. Um, changed majors to computer science, did my first year of programming. I thought, funny enough, I thought people that chose computer science had been doing programming like their whole life and they knew what they wanted to do. But in the first Java class, like no one knew how to code. I was like, this is kind of crazy. I thought I thought this was like a thing everyone that chose computer science would do before you come here. And that was kind of like being tossed into the pit of computer science, like learning about algorithms. And then after that, I kind of met one of my one of my my best friends. Um to this day, still we still best friends. And we started to make games. And we have been working on like nights and weekends making games for fun at school. And we by the time the first career fair came around, there were a bunch of companies that came in to kind of you know see see different students and we thought to ourselves how do we differentiate from other students. So we came in with a laptop showing our game demo and we we showed us all all the recruiters. Um and that first year we got like a I think like four offers for internships. I got Microsoft, GE, a bunch of other small smaller companies in Florida and my friend went to EA. So he had we built a game, he went to EA, you know, interviewed there, got interned there. I went to Microsoft. Um, and that's how I got the internship. Um, I showed him the game. We I did interviews on campus, flew out, did full-time interviews, you know, before COVID where it was all inerson whiteboarding. Uh, got my internship and that was kind of like history. Um I interned twice uh 2006 and seven. It it was eye opening. It's coming from a small country going to a big company experiencing like big campus big technology um talking to people who were like really really really smart absorbing information. It was it was kind of it was great. Um and I was part of the last set of set of interns that got to go to Bill House. That was kind of that was kind of fun. What what was that like going to Bill Gates's house? So, historically, every intern group at the end of the summer got to go to Bill Gates house. That that was the the main event, right? Um, in my time at least, and you would get picked up in a bus and they would take all your technology. They would take away your phones, take all your stuff, give you instructions. You actually park out, I think, at a church and they would take your stuff so you could take pictures. you get, you know, they would tell you like what you can and can't do at the house and then all the interns were just going to his his like big really huge mansion. Um, funny story is I recall just standing around talking to interns, not paying attention to what was happening and I remember seeing a rush of interns like run towards me and I couldn't figure what was going on. I turned around. He was like, he was behind me like there's Bill Gates. I shook his hand. So, you see I I spoke to him once. When you interviewed for Microsoft at the time in 2006, was there leak code or what what did the process look like at the time? What kind of things did they ask? There's a book called um how would you move Mount Fuji? And it's this classic book um doing tech interviews like Microsoft created these like le code style um puzzles that everyone loved to hate. Now like the puzzles that are like why is a manual cover round is one of the most famous ones that people would ask you a question. Okay. When I when I was on campus doing the um interview I'll never forget they they were asking me questions and I had been prepped for coding coding interviews. I had been thinking about like coding stuff but I hadn't taken all the classes yet because I I was in my first year of of university so I hadn't done like all the courses required to learn about all the things right so it was me on my own my friend trying to figure out how to like what how to prep for interviews and they asked me it's so it's so visceral they asked me a piling drum question super easy not not hard I did it on paper like with a pencil like writing on paper and then they asked me did you ever watch Die Hard 3? No. There's a scene where Bruce Willis and Sam Jackson have to stop a bomb from from going off and there's like water on a f in a fountain and they have um a five gallon jug and a three a three gallon jug and they have to make exactly four gallons to avoid the the the disaster. Oh, okay. Okay. And I had seen the movie, right? But I couldn't remember the secrets of steps required to get that to work. And in an interview my my after the coding question they asked this this puzzle, right? So you have infinite water and you you want to make four gallons and you have a three and a five jug and you have to make exactly four gallons. Like how do you do it? And I sat there and I was like oh my god this is that hard and I I figured out but it was it was funny because it to me it was like this is like pre-le code not even thinking about solving some sorting question or something. This is just like puzzles like can you think through puzzles? Um, and the last question was, "How do you count the number of gas stations in Florida?" And I sat there and I was like, "Is this a trick question?" And the guy listened to me. He says, "No." And I'm like, "What? I don't get the point. I don't get the point of this stuff." And I thought I had I thought I had like done really poorly, but they had they called me, so I was like, "Okay, I could have failed miserably." That's so funny because people hate on leak code all the time, but these puzzles, it sounds like leak code's better than these puzzles. Actually, it's related to the job. I don't even know if you can prepare for some of these things. Like my my last interview, my my second last interview when I was when I flew out and was on campus, I got asked how do I add two numbers in base -2? That was my final question. It was just like what? It's come a long way since then. It's this changed a lot. I mean like some for the better, some for the worse. So going back to the story then. Um so after you had the internships I you committed for full-time and then you had a pretty quick career growth on the outset and I see that there are a few pivotal projects that led to the upward trajectory past senior. Kind of want to talk about the story behind those projects. So for instance, maybe we can start with NuGet which is the package manager. What's the story behind that project? That was interesting because NuGet I think we're like 10 plus years in now is like the the package manager fornet it was when I think think about the impact now compared to what it was when it started. It's kind of jarring because we started off we were building a brand new web stack and we were trying to compete with like the LAMP stack right so LAMP was like Linux Apache my SQL PHP and we were competing with that from a net windows server standpoint whether or not that made sense or not at the time I didn't I didn't think about that stuff like the bosses above me told me we're doing that like let's do it so we built this whole this whole new web stack and Ruby on Rails had come out like concurrently at the same time and gems was like this huge deal. Ruby gems, get gems, get packages, you know, run commands in Rails. And we had seen that, but there was also a cohort in the company looking at things like WordPress and Drupal and those have packages too. And I think the consensus was we need to have an a package manager to like pull in packages so you can extend the platform. And the very first version of Nougat was this in browser package manager that was like a WordPress thing. And I remember we had this meeting with um who is now an EVP, Scott Guthrie, and it was all about like reals and gems and we have to compete with the package manager and there was a product manager who had mocked up in screenshots and PowerPoint an experience and it was me working with an architect saying like we had built something like can we just take start from here and that that that meeting formed the the Nougat team. It was me. I was the first engineer. There was an architect um David Evo and Phil Hack and we we were the the founding team of of Nougat. There were other open source nent package managers in the ecosystem open rack and and new and we like had a conversation with some of some of those those people and we started off this mission to to build a package manager for this fornet. And so when you were building this, it sounds like it got pretty uh critical adoption within the net platform. Yeah. What did your performance review look like when you were you finished building this thing? Was that like a really incredible success for someone who wasn't even a senior engineer yet? Yeah, I got my first promotion came like eight months in when I when I when I joined um even before Nougat. I think like my first year was me I I had interned twice so I had a lot of experience like with just Microsoft just in general and I would work on the things I I was assigned and then I work on more stuff. One of the things I did was I would troll forums looking for feedback for our products and I would just build features to to solve them. And I just did that over and over and over and then kind of showed product managers and the team and architects and who turns out were my sponsors um I guess in in the looking back on on how it how it went. And I think that helped me be in a place where I could be the one to build Nougat. I would I would basically just look for problems to solve and I would attempt to code them first. I was very I mean maybe I'm still the same way. I'm a code first, ask questions later kind of person. So my my whole thing is code is currency. I can show you a working sample. It's not a PowerPoint. It's not a document. Here's a working example of something. Oh, we should start there and then move on to something else. Um, so my review for Nugette was like I I was getting really good reviews early in my career because I would I would just grab things. Funnily enough, one of my directors at the time told me like maybe five years ago that he would just tell people that David has energy. Go talk to him. Maybe that's why stuff stuff came my way. You mentioned that NG get grew way past your what you imagined and I know at some companies there's this idea of deferred impact where sometimes people continue to get credit for something that they built and is continuing to pay out for the company. Did you see anything like that in your subsequent performance reviews? Yeah, I I want to say maybe the bigger ones the bigger ones felt to me like a conglomeration of history like past success adding up plus success. Um I think at Microsoft in in general impact is supposed to be for the year but I think when you're doing these I think there sometimes we call them band changes right so when you jump across bands it's a bigger promotion within band is a smaller promotion so if I go from you know 61 to 62 I'm still but you know it's still worth a promotion but when you jump when you cross the boundary of going from two to senior or senior principal you require more more things to to more impact to to make that that leap. And I think I'm not sure if there's an official deferred impact um thing in Microsoft, but I I remember that did come into play when I when I went to, you know, higher levels of principle and and stuff because it was it was definitely not a one-off like, oh, you you did this one thing this year or like you're promoted. It's like h have you been showing repeated impact over the last 10 years and do we want to you know keep you going forward etc etc. So I think it did it did matter. You mentioned some other larger projects. So um maybe we can talk about some of those. So there was a signal signal or is it signal? Signal R. Yeah. So that okay that that came from that the naming the naming is the time frame came from the time of flicker web 2.0 remove ease from the end of things. That's I don't know why we called it signer. I mean we know why but that was a fun project. I had been working on nights and weekends on this project and it was funnily enough like Google Docs came out and I have been like enthralled with the fact that you could co-edit in a document. I was like this is just nuts and it works super well concurrently and I was like can we do this for code? So I had to start I I went off trying to build Google docs for code could have been rich but ah didn't do that anyway and while doing it I learned about websockets which actually hadn't come out yet. I learned about basically how to build those kinds of apps and that led to the creation of signal R. In the meantime there was a product manager on the team Damon Edwards who was also building a talk to describe how to build long running streaming apps innet. So I had seen his talk and I was like hey I'm building this thing we should collaborate on this new library right so that kind of spawned the like night side weekends what we call Microsoft you can moonlight and work on things that are not tied to your work um separately officially. So we had been doing that like overnight we just work on this things up until midnight every night. Um, we made it open source and then people started to use it and we were like, okay, this is interesting. It's catching catching on becoming a thing now. It was still just two of us working on this every now and then. Didn't know what we were doing really kind of like just building this thing to make it work. And then at some point a product manager at Microsoft on the team said, "Hey, we should make this official." And that's when that I think that was the first thing I experienced like building a project from scratch. Previously I had been working on other people's ideas. You know someone had a great idea. I was a a decent dev. I would come in and be like found engineer. This one was like my brainchild. So it was very much I we built the proto. I built the entire thing from scratch and now I was being given the chance to have a have a team to work on it. Um, I was never a manager, but I was the pseudo tech lead. So, we we hired like kids from college that ended up working on Signalar. I had we had a team of like eight, I think, at one point. And it was surreal because it was like, okay, there is this random thing that I built like on a weekend and then it kind of turning into this project that's real. What was the motivation for SignalR? What made you pull the weekends and the late nights to build this thing that seems like it was outside of Microsoft? I hadn't seen anything like it. Like when when Google Docs came out, it was first of its kind to work that well and it just felt super new and no one I hadn't seen apps do that and it was like how do we enable more apps to do the same kind of thing. Node.js JS like socket io and node were super new and socket io had just come out and it was like oh that's a really cool way of building these apps that are that are chat and and can send stuff from server to client and we just I think that just drove me because it was like okay I hadn't I hadn't seen people attempt to do this before let's just let's push it's funny we we pushed the boundaries of like the technology a bit we had limits like all over the place in in the tech stack that became problems to solve deep in the deep in the core platform too. So that that was a really good um way to learn learn more about the overall networking stack. And I think the the the amount of problems we got to tackle maybe made it enthralling for like a a dev that like I got nurse night. It was like catnip. I was like, "Oh my god, that this is so interesting because you grew through this project and it was permissionless, which is that no one handed it to you. There wasn't some manager, some PM that came to you and said, "Hey, your staff's on this project. You just went and you built something and it was so impactful that it actually led to a ton of career growth." Um, I'm kind of curious, maybe we can is there some way for us to reverse engineer that for others? Like, how how do you go about starting projects where the motivation comes completely from you within a large company? It's a really good question. Um, if I had to to boil it down to one sentence, you can just do things. And I think the the way people talk about it now is you have agency. And it it often seemed like you don't like it's really hard to find time. And I I am not recommending people spend nights on the weekends working on all the projects, but early in my career, I my my main goal was to get better at like software engineering. And the way of doing that was to learn everything like build anything you can build games, websites, like just build a ton of different things and you just gain experience from learning how to build those types of software, right? Um so I think that was ingrained in me from really really early on. And then the other thing I did early on in my career was I found someone that I wanted to I found someone on the team that I I wanted their career. So on my team there was an architect um David Evo and his job seemed really cool. He got to think about the future. He kind of spanned multiple areas of of the product. He got to build the next wave of what was coming next. Um, so I basically attached myself to him and I limit his behaviors and I said to myself, okay, I I want that role. Let me make sure I I'm seeing what he does that seems to work and I want to keep doing that. And I would I would be the coder of his ideas, right, for a while. And that turned into learning how to do it on my own. So I kind of I did this gradual thing where I was like attached myself to people who were like that. And then I found myself in that same position. here's a new thing. I have some insights. Let me try spiking a thing that will work and then I I communicate ideas with code. So I would always build a prototype first and then show someone show an advocate on the team, show the architect, show the PM and say like is this useful? Is it cool? I saw this issue that um a customer was having. I think this solves a problem. Do you think we can turn into something? And that I think that pattern of doing that helped me gain insights into what people um what what helps people get over the hump of like should we build something or not. I I would build a thousand things and maybe one would hit. It's it's interesting that you say agency. I I think a lot of people who work at big companies or talk about big companies, they feel like it's difficult to have agency. they have all these projects that are assigned to them depending on the team culture and it sounds like you had that agency through energy. So you were moonlighting you were doing going above and beyond. You did your normal stuff but then on top of that you had all this extra agency. uh in in my understanding that's how you unlocked agency at a big company and I think it afforded me I think once you build a reputation for being able to kind of perform build and build things I think more things come your way I don't want to say like it is easy or it will happen but I think in my case 100% like when I when I the more things I built the more things I showed people on the team people would just say things like Hey David, we're building this new thing. Like we want to get your take. We want to get your opinion. Should we work on it? Can you help us build this thing? Um, a lot of opportunity comes your way when when I think you have a good rep for building stuff. I think further in my career that showed very true for what happened that what happened after Signaler pretty much you get a lot more of those permissioned opportunities when you have credibility and permissionless agency is uh it's almost this hack to kind of bypass credibility. Yeah. And and a funny story I think the funny thing is like you you get a chance to be more permissionless the better your track record is. So the more you have, the more success you have, the more lia you get to fail, which gives you space to try more things. Yeah. Yeah. No, that makes sense. I I've seen that a lot. The the very high fast growing software engineers, they're almost this weapon that management and people around them say, "We trust you. Go do that thing that you do." And they can go and try all these risky projects. I bet if you were someone who was uh struggling to meet expectations, a lot more directed opportunities are being handed to you and you're being monitored. So I can totally Yeah, totally see that. So true. Going to your latestage promos, you got the promotion to principal, you got the promotion to distinguished at Microsoft. I'm curious, what is the thing that led to the promotion to principal? Principal was interesting. So, I I had I had one boss, I won't say his name. I had a one boss who who told me when I got to senior that my promos would slow down. And I remember that meeting where I sat down and I got this I got I got the promotion. I was really happy. He kind of gave me this downer like don't expect more promotions like from here because you know I was like what does that mean? Um and I never really took it took it to heart but the the jump to principle is a big jump. I had been working on Signal R at the time. I built this um if you ever use Heroku. Heroku like pioneered get pushing and deploying your app like instantly right we had built there was a there was a tech called app harbor for fornet this this company was doing the same thing for net and we built a similar thing for Azure this is like super early in Azure time frame right like we had built this like brand new it's actually still there it's called kudu um and I had I had been working with the same architect and I had built it with him um And then at some point in that time frame, I got pulled off of that. And I think this is one of the places where like your track record helps just get set up for the future opportunities. So I had my director tell me, "Hey, we have this new thing spinning up and we need you to go work on it." And obviously, you know, you're working on something else. You're like, "Man, I want to finish what I'm working on, but then this thing happens. I'll I'll help people with this thing. And that ended up being the beginning of the new .NET um .NET core that we write that was crossplatform and modern and new. And it was a big opportunity like so big it was scary at first like oh my gosh like what do you mean you're the architect like and I was senior I was I was it was me it was me and another principal engineer that got chosen to be the architects of this project and I hadn't had an an experience working at that scale before because I think you had like 30 engineers that were working on this this project. Um, but we had free reign to kind of build what whatever we thought was right and that was like both amazing and terrifying. Um, and I think through that project I learned a ton of things like knowing how to I I don't want to say we weren't managers but learning how to manage a project and architecture and scale and like initially I was trying to code review every single change. You can imagine that burnt me out within within a year I was like okay I can't I can't we can't do this anymore. We have to figure out how to trust people and scale and figure out what's important, what's not what's not urgent versus urgent, etc. Um that year I got promoted actually had my first first kid and I got promoted that to principal that same year I did this um the first year of .NET Core um design and and building it. You you mentioned that that the team grew so much that you had to scale yourself out of necessity. What are the things that you did that allowed you to be like architect for so many engineers without burning yourself out? So I learned I learned some of this during Sigmar. The the the smaller version with Sigma only had like seven or eight people overall, right? Engineers, textures, product managers. And we had two new hires. And I had never had the experience of delegating in a way where I thought it was like if I gave you this work, it's to grow you, right? I never thought that way before. I was always like, I'm a senior engineer. I can get this done. I I can do it faster than you. Like why would I give you this thing when I can do it faster? Um, we had really smart engineers that we hired from college and it took me a while to kind of get past it's going to take them longer at first, but once they understand all the stuff, then we we can amplify the impact. And I think once I saw that, it flipped my brain. So I had I had something from from the Sigma frame that was like okay if you can invest in people and kind of get them on the same page as you if you are on the same wavelength if you can delegate more um then you can kind of get get more done as a team right you you be you begin to be you begin to think about outcomes and less about like the work you're doing individually I think the leap from senior to principal feels like being able to to do more through others than yourself and it's it's where I think a lot of people end up plateauing because software engineers are very like you know we want to we want to we like coding we want to be alone we want to build the things ourselves software engineering is a collaborative event it's like we want to figure out how to get the customer feedback figure out what to build figure out how to build it the best way and I think that change in in my brain prepared me for like core because it was such such bigger scale like how do you even begin to manage that many people that that many facets we we rebuilt everything from scratch like we literally rebuilt the package manager the runtime the libraries like everything from the get-go and it was overwhelming at first um what I think helped a lot was not treating everything as equally urgent like that was a big deal like if this change over here went in and it wasn't perfect. I wouldn't be like we can't merge this. It needs to have this interface, these tests. Um, learning how to set foundations for others and to trust others and like letting people fail was a really hard thing for me at first. Okay, I could I could avoid the failure and and it turns out that the team like I think a lot of the things that get you to senior and maybe principal hurt you grow even further, right? Being a control freak, being someone who like is amazing at their job, getting stuff done in a very specific way doesn't really help you when you want to scale it to a thousand engineers. You have to kind of figure out how to inspire others to do the same as you through different means like one-on ones or or you being an example or like more more different techniques, but it's difficult to just be to type. You aren't going to type harder and make a bigger impact. So, it's like I shifted my brand to be outcome focused was a big big change. You mentioned the architect title or I guess role. What does that mean at Microsoft? That's a fun one. Um, when I joined, I saw someone who was a principal software architect. Let me say for myself, that's the role that I want. I don't know what it is. That's what I want, bro. It's kind of a semiofficial role at Microsoft and at certain levels, the middle principal bands, you can be one of these architects. And to me, it really means you're more breath rather than depth. You're more overseeing the design of the overall system. We have different engineering archetypes. I would say even at the highest level you have someone who's a super coder who is like I am just going to build so much stuff I can impact so many things. There are people who work on really deep technical details that have a huge impact. We have um one of the foremost GC experts like in the entire world right working on um the net garbage collector. So you can have that kind of impact. Um you could be someone overseeing a hugely impactful area of the product. So there's a lot of space to kind of like figure out what archetype you want to be. And I think the architect role for me felt like breath. So I am architect for aspet core back in those days and I am like overseeing the design of the whole stack the web framework web server how we how we ship package like the entire engineering um idea and I'm not the the engineering lead I'm the architect so I'm trying to vet the decisions that are going to like last for like 20 years if we do this change now we can't do this thing in like five or 10 years and I hadn't had experience doing that before but I had a really good mentors who had done that. that I've been watching and shadowing and trying to understand through experience like how do you build systems that last 20 years like holy crap right so as you've grown to distinguished engineer at Microsoft how has the percent of your time that you spend writing code changed it's funny I think I think there's what your job is like do I have to code every day to do my job I I don't know if I get rewards anymore for coding. I get rewards for outcomes. But for myself, selfishly, I code every day. So my team knows right now that I I send lots of poll requests every day to the code base. I'm I'm currently working on um I have a new project I'm working on. This shirt um Aspire and I code a lot. So I I personally make sure that when I'm working on a project, I am somewhat involved coding still. I don't want to be the architect who doesn't know the code and is giving people instructions like you should do this and I'm going to go away now and disappear somewhere else and and you won't see me again. I want to be the person who is like you I'm a pair on the team. I want to be your everyone's peers and I want to be facing the builds and doing facing the test and not there isn't any work that's bene kind of what what I'm thinking. Um, so I when I when I'm on team, I typically work as um as an engineer on the team. If you stopped coding right now and you just kept leading the team, would your performance review look fine? Yeah, I think so. But distinguish engineer is definitely about companywide or organizationalwide impact or companywide impact. Like so I think even though my my day job is definitely making sure the architecture of of as a whole is is sound and good and moving forward and we're doing the right things and pushing is a part of my job that is like looking forward and you know talking publicly and like um inspiring people internally and mentoring people and so there's a lot of things I do that aren't like what I used to do way before that I think help with with impact. Um, as an example, I gave four talks internally about how to use AI to do software engineering and that happened just because I had been using it myself for a lot of different things and someone said, "Hey, you should give a talk to the team." You think about the impact of those things. They they help when you see engineers who aren't just your boss telling you to go do something seemingly for bad reasons. um engineers who are credible telling you how they do their jobs. So I do a lot of that stuff too. A lot of things are not software engineering to be to be frank. When you got the promotion to distinguished engineer, what's the story behind that? Absolutely insane. Um first of all, distinguished engineer is the final level of like partner. If you go on to the levels, FYI, you'll see level 59 to 80. I think the last is 80, the final level. Um, distinguished engineer, I think it's 70 on there, right? And there's a there's an actually there's actually an official process to become to to get that title. You don't just it's not a promotion that you just get and because you did a great job that year. It is a set of technical leaders have to peer review and decide that decide if you are I'll say worthy or not if you're worthy or not of that title. Um it was probably the craziest promotion I've ever experienced mostly because of the the people that are there at Microsoft. Just as an example um Guido Guido Van Rosson who created Python is the same level as me. Wow. So like imposter syndrome, right? Imposter and Guido's great. Like he's he's great. He's really fun, cool guy. Maximum imposter syndrome. I'm I'm young. I think I'm young for for that role, too. So like when I was going for that role. I felt as though that would affect me as well. It It didn't, but I felt it would it would affect me. So I I had all these hold up hold ups about like am I really at this level? Can I can I perform there? Can I do well there? And then w with all of my I think this is probably where all the work I've done in the past helped because you do need a body of work and you do need um a good track record to qualify for these kinds of roles. You can't just become a DE because you had a one fun one fun year. Um I think some of the criteria ends up being like what have you contributed like that that impacts companywide like things. what have you contributed that has so it is a lot of it is like deferred impact I guess if it makes sense because um net member when I when I went to from principal to partner in the email it had net course impact and that was a by then it had been about seven years it wasn't like I did it last year or the year before it was like this is built up impact and then like I had been the architect to help people adopt the new net internally and I had done that for a bunch of different teams. So like there's there was all this kind of build up to to like I guess deferred impact a really good way of saying it. Um and I think all those things helped Nougat signal like how did it how did the thing that you helped build and mold and raise like grow how did it impact the industry the company and those all come into account when when um the the I think the the their fellows who decide who becomes a DE. Were you involved in that process at all or was it a surprise when you got the distinguished promo? I was involved from a point of from the point of view of helping my leadership with like content. So I I gave them all of my contributions to things things I've written like papers I've written code contributions to various various projects. I kind of gave them the raw material. I didn't do anything else. Um but what what made it impactful for me was seeing the other fellows like acknowledge and say like welld deserved and it's about time and like okay maybe I should maybe I should maybe I shouldn't be here. This is this is good. You mentioned the lofty expectations of this distinguished engineer level. Yeah. Is that something that you worry about now that you've been acting in the role for a while? At first I I I would tell people I am a baby D. I've only been here like a couple months or or it's been one year now and I not sure yet. Um I think now it's been two two and a half two and a half three years now. Um I feel pretty confident I can perform at this level and I think I understand what is what is required. Um I would say initially very much ex my my first review cycle um I felt pressure to like document everything and just write down what I thought was all the impact right it wasn't it felt very much like oh my gosh I should I need to make sure I'm write all stuff down um telling my boss what I'm doing like making sure he knows and because I think you're you're you're almost an executive at the company like you're you're you're at the level below being executive and like it's super scary to think about h having to have that impact every year repeatedly over and over. So I think I found a pattern for kind of like making sure I had the right level of impact. Um talking to my bosses, making sure I had I was visible, making sure I'm doing all the right things. So yeah, I don't I don't feel the pressure as much now. Um but who knows? I mean, things could change. Things could change. So, so you went through it looks like 11 promotions which is kind of ridiculous. You went all the way from the beginning all the way to then and the crazy thing you're saying Guido the founder or the creator of Python is that level as well. I can't even fathom cuz apparently there's one last one the technical fellow. What what does that final boss level even look like? So the people who are fellows, tech fellows, I guess the the the one that you know in my division that everyone idolizes, Andrew Halsburg made Turbo Pascal Deli C and TypeScript. So like no one's competing with that dude because like no one you can't repeat building for successful languages. Um, but I think if you were thinking about the the archetype of like someone who is a fellow, it's that level of impact, right? Or the people who built the Windows kernel. Actually, there there's one guy Dave Cutler who came from Deck back in like the 80s or whatever and he helped build he built Windows NT, he built Azure, the the OS, he built the hypervisor for Xbox. He is the only senior technical fellow. Wow. That isn't even a real title. That's just his title. Wow. So, it's kind of like it I think at those levels, everyone's a unicorn and everyone has their own path. So, you aren't trying to follow people's path onetoone. You're looking for proxies for for impact. To be a fellow, you need industrywide impact, not just impact in your division, in your company. It's like you need to do something that impacts the industry. I think we hired someone recently who is a fellow who like invented RSS. It's like that. It's like that level of like thing, right? It's like you built something that became the industry standard for, you know, the internet. like um there was a guy on my team who was the intern for Tim Berners Lee and he is on the HTP spec like is that is that yeah so yeah this those are the kind of people that end up being fellows I think were there any unexpected perks of getting voted to distinguish engineer besides more money um let me think well for instance I guess the thing that I'm curious about is uh at a lot of companies when you get promoted to a certain level, you get added to special forums that only distinguished engineers have. Okay, the coolest part. Here's the cool the coolest part. There's a there's an email alias called engineer. That is all the dees on Microsoft. Oh wow. It is just the coolest alias the engineer on Microsoft. Like all this is really that's awesome. That's one of the perks. Yeah, but there there is there is there's a there's an internal um there's a forum where we all meet I think every every couple of months. The way this typically works is you have a sponsor, right? So when I'm when I'm when I was going to be I told my mentor I want to be a de I had I had mentors who were fellows. Okay. So one one tip when I became a partner I told my men I I told my management that I want a mentor. I want help find a mentor who is a fellow because I want to be one. So I figured if I want to be one, I should have people who are men mentors that can help me get there. Um and my one of my mentors was very impactful in my career. Um he invented PowerShell, Jeffrey Snowver, and he was one of the best mentors that I've had. He actually left Microsoft and went to Google recently. Um but he was like really really impactful for me in my career. He was my one of my main sponsors and I ended up um getting to go to one of these tech leaders forums and I got to mangle and talk to all the people who were like there and it was really really interesting, really cool. You mentioned that that mentor was incredibly impactful. What was the things that he was telling you that made a difference? A lot of people I want to say sugarcoat like how to get places, how how to get promoted and they'll give you very generic feedback. Um you have to do a project that's super impactful. He was very very much direct like we should go talk to the people who decide and ask them like where you are and then and it was jarring to me because I I never thought about asking the teacher for why why it it like no one ever tells you um you have to do X to get promoted. Exactly. And it never exactly works one to one. It's like you have to have more impact so make sure you're working on something that's like you know super impactful and maybe you aren't now and change. He was like, "Let's go to the source. Go to the host. Let's go talk to the CTOS. Let's go figure out like what it means for you in your in your role." And I was like, "That is super helpful." And because it helped me, it helped me understand what I should and shouldn't be doing in a very like real way. It wasn't just arbitrary advice that just happens to you. It was like very explicit. I had a second mentor. I had done some there's this thing where you can get feedback from different people in in the company your manager um your peer etc. and it gets turned into a package and they give you feedback and it tells you your strengths and what you're what what you're good at, what you're really bad at, what you're what what how you act under stress, all these things. And my my first reaction is, "Oh my gosh, I'm going to have to fix all the things I'm bad at. I got to figure out how to, you know, get leveled." And my mentor was like, "No, no, take your strengths and amplify them even more. you could work on the things you're not good at and be average at those or you can work on things that you're really good at and be super human at those things. And it it broke my brain because up until and that was like I want to say five years ago up until then I had been thinking about man how do I make sure I am better at everything so I can like be a well-rounded individual. It was like no one no one gets promoted to these roles for being average. you need to you have to be super human in something that you're that like you're really good at that people aren't right. So that helped me refocus to to thinking about finding ways to make up for things that I'm not good at. So as an example, if I form a team, I am not the one that's going to schedule meetings or I am not going to go through every detail of how how we ship and all the all the checklist. I am super bad at that stuff and I will make sure I have someone who is really really good at that stuff so I can focus on what I'm good at. Right. So that helped me reframe how to think about um amplifying what I do well to kind of um get more impact. Makes sense. I mean it's kind of like a power law type of thing. At the top is where there's the most insane returns. Just take those things and go further on that exponential. Exactly. It's exactly that. U you mentioned a lot of these you know impressive engineers and I think as a distinguished engineer you have a unique perspective because you can see what is impressive with a critical eye of a great engineer. What are some examples of other engineers that you look up to and what makes them impressive to you? I can I can talk about some of the well-known ones and then talk about like just people that I work with in general that are impressive for different reasons. my current team there are like five other partner level engineers that have been here 20 plus years that are just really really good for different reasons like experts in the GC one person is like a super coder like just he just codes 10x people complain about engineers aren't 10x he's 10x he just produces way more code than everyone else combined Right. Um, there's one guy who like literally seemed to know everything about obscure things you would never understand in your life without having to have seen it yourself. All kind of stuff. Stuff about C, stuff about compiler, stuff about the OS, and you're like, how does he seem to know everything about everything, right? Um, and then there there engineers who just seem to know what to build and have a good eye judgment. So, I I'm I'm on the C um review design review team. We meet every couple of months and we review C# features, right? New features coming into language and I'm on there with Andrew Hellsburg who made C#, right? So like what I say doesn't matter. What he says matters. I mean it it does it counts. Um but the way he communicates like the way he gives feedback for what feels good and what does not feel good. He always does it in a way that is very much like he is not talking down to you. I mean, this dude invented four languages are just like what what everyone uses and yet he can still talk about it in a way where it's like, you know, some people are really smart and they talk down to you and you feel dumb because he's like, "Oh, he's super smart and I'm dumb." He does it in a very pragmatic, practical way, but then you see the code he commits and you're like, "This dude is inventing titism theory that we haven't even seen before. Tech is like insane." Um, so I admire a lot of like watching people like that spread their impact. Um, Mark Rosanovich, who's CTO of Azure, famous for his Windows tools. Um, he still codes and it blows me away sometimes like he's he actually is working on something right now. Um, and he sent an email two days ago and I was like, "Holy crap." and and and and it was it was very dev a dev centric email. It wasn't a high level we should do X. It's like no, I wrote some code. I improved the performance. I'm like here's the result. Now I was this late. How does she have time to do stuff? So I think whenever I see highle engineers or IC's still coding like that, I get really inspired. It's really easy to fall into the meeting trap. Um actually when I went partner I fell super steeply into the meeting trap of like I was in meetings all day every day and I got really sad and my mentor said as an IC your job is to have like you you need to think and to build stuff. So minimally on your calendar block eight hours a week minimum to to do that stuff. And it took me a while to change my brain to say I can just say no to meetings. Decline decline decline decline decline. I can knock our code. So I I think the next set of questions I want to ask you um because you have a public presence on Twitter. There's all these top tweets that you have that I think are really interesting short thoughts that I'd be curious to have you expand on. Yeah. So I think the first one is um talking about university courses and you said that you know there should be a university course that explains how to refactor code, how to make changes to it without breaking an existing code base. My question to you is if you were to design that course, what would some of the key concepts be? Having been working for this long now in industry, computer science is not software engineering. It's not even this not even close, right? Computer science is like learning how to learning the science of of computers and bits and bites and the math and algorithms and you do a little bit of the things that are software engineering like but it's nothing like software engineering. So when you get your first job, you spend a lot of time just trying to understand what's there so you can surgically make your first change and not destroy everything, right? Like don't break the bill, don't break everything else. So I think if I were to have a course, you would be thrown into an artificially big code base. We would we would have a maybe it would have to change every year because students will just copy from the previous year. So it has to change every year, different code base. And your job is to make a bug fix. you got to fix a bug in this codebase and write a test for it. And just the the the skills you learn being a code architect, a code archaeologist is so different from just just writing buying an elite code question or doing a homework assignment that is just like this one thing in a textbook. You learn a lot of adjacent skills from just trying to figure out where to put the code in the first place. I I think it's funny. I think thinking now I think it would be super useful like every every assignment is making one one fix and maybe you can set up the code base such that it's not super hard to figure out what it is anyone with enough time like you know we could figure out and make this one triple change and and add one test. Um but I think a lot of a lot of people's jobs are tweaking software that that is there already. Not everyone gets to create new software. Like if you if you work on Windows, sure you'll build new components, but you aren't going to change the kernel unless you're going to do a new a new a new OS. Um, so yeah, super useful skill. Yeah, I think there was another set of tweets that I saw that was kind of around this idea of that tech interviews are focused so much on writing new code, but actually the real high leverage skill is debugging it. Yeah. What gives you that that thought? Maybe you can expand on that. So early in my career um I worked with a ton of engineers who were and on the on the donet team we had a lot of engineers who just work at the platform level. Um so I got to see firsthand people diagnose crazy crashes risk conditions threading issues. I got firsthand a firsthand seek to even watching people's mindset when they go to diagnose issues. I thought to myself like there's kind of two skill sets that are m maybe you learn some coding but they're just not the same skill set. And if you think about building an application, deploying it, shipping it, and then getting craft reports, trying to resolve issues, like trying to figure out what's going on in production, there's this second skill set that is just not writing like not authoring code. that is how do you even think through debugging issues? How do you know which thread caused the exception? What tools do you use? How do you think about how it got there? Is like I thought to myself, it would be fun to have an interview where you give someone a crash dump or something like, "Hey, this this this app just crashed. Like, figure out what the problem is." And you aren't trying to see if they can solve it. You want to see what they even start doing. like do you start adding logs? Do you rerun the program? How do you think about risk conditions? Do you like print thread ids and try to figure out interle? Like all these all these interesting things come out of watching someone try to diagnose problems. I it's funny I have the highest respect for engineers who can be thrown into like a a problem situation where they don't know the codebase super well um and they can kind of solve the issue. Super fun story. I remember being this is early days in Azure. There was this very I can't remember what the site was, but there was a very popular site that was going down. I was running on Azure and I'm like all I was up late. It was 1:00 a.m. and my CVP sends me a message like a a DM. It's like, "Hey, you free?" I'm just like, "What? Yeah, I'm free." I get added to a call that has like a hundred engineers trying to debug why the site is crashing and you know like we we call the the the team who was working on it was some other company but we were helping them as as engineers from Microsoft trying to debug the issue and you could just see the different people's skill sets trying to figure out what the issue was and we solved it eventually. um it was a concurrency issue somewhere in some dictionary that caused a risk condition and I thought to myself like this is one of the skills that you need to have as an engineer like writing code is just it's a small piece of your overall skill set learning how to debug and think through issues is like another big big chunk yeah and as evidence of that being very impactful I know some companies you know every company has their different archetypes and you mentioned like super coder also known as code machine in some places. Code. Yep. There's also I've heard the archetype fixer, too. And that's that's a that's a really cool one because it's been described as someone drops in somewhere, they make a oneline change after tons of investigation and it gets two times better, three times better or something like that. Oh my gosh, we have some engineer on on the team who there'll be a thread to get started off. whole perk issue somewhere in gRPC call and I'll add the engineer that's right and say hey can you look at this boom boom boom here's a trace and I'm just like oh my gosh it's solved it's solved so impressive um another tweet that you had I thought was really interesting is it says lukewarm take the lower on the technology stack you sit the less mistakes you're allowed to make what what made you think of that did something break super low level in the stack somewhere I have to be working on some so I work on platform so the way we think about software is way different from you know higher level services or even web web front ends or whatever I think maybe I have been working on something that broke I mean a lot of things break that are just kind of insane the things that we change that break services are absolutely unheard of um we will change the order of how things come back in a method and like it just snaps some some company's website goes down. Um so I think when you work at that layer that you gain an appreciation for the kinds of changes you can and can't make. Um I think I think that tweet maybe was inspired by one of these bugs cuz I I work on I think at that time I had been working on um first party adoption of of ofNET and we had seen a couple of people upgrade and hit issues that made us just completely shocked. It was like how did how did you find that bug? Like no one hits that. What do you mean you have 400 400 arguments to method? Like that's not there's some limits somewhere where that like that can't be a real problem, right? There's another tweet here and that is really interesting. It's about promotions. You said that when you got promoted to a senior software engineer at Microsoft. You remember thinking that other people were smarter than you and should have been promoted first and you would have thought they would be angry but the opposite happened that actually having good co-workers matters a lot and people weren't you know so yeah what's your your thought there this is you you are you are bringing back some good memories so I remember when I was going to senior I actually I was actually a little worried about getting before other people because I I have it on a really fast path And I thought I mean maybe maybe it would make people jealous. It was like why not me and and and when I joined my team I think there were four people from MIT and two from CMU and I had gone to Florida Tech and I was like okay these people are like way smarter than me. So like my way of working through imposter syndrome was just to like work really hard and like be a busy be doing stuff. Um, I think I understood that when I got promoted to senior that the impact was not about being intelligent. It was not just about like getting the highest grade or being smart. It was like are the things that you're working on being a top of the business. And that was the shift where I under where I began to understand like okay it's not just about what I know. It's not just about that this person on the team is really smart in area X. It's like can I take all that and produce something that is impactful and that promotion helped me see okay that was the new get thing the signal thing that's how you get promoted that's how you you you know you you add impact for the team it's not just about knowing this thing about this this feature about this area about this OS because I always felt like man I don't know enough about you know technology X or about area X I got to go deeper and learn more and the question was always is that for you or is that for your career? Like what's it for? Um, you don't have to know how I don't know, maybe you should, but you don't have to know how TCPIP works to get promoted to to senior. Um, I'm sure people don't know the details of how how it works, right? Um, I think that that promotion for me helped me separate like being smart from making an impact. It's like okay promotions impact those promotions. Being smart is something else. It's just like knowing knowing more stuff and being helpful for solving problems. Um and the second part was my co-workers were happy for me at least outwardly. It was but I was I was really worried at the time because it was like new person joins team gets promoted really fast. Do people see that as why not me or do they see it as yeah that makes sense? Right? When I asked questions about other people who kind of went up really fast to my period at the time, they would say things like everyone knew it was going to happen. Like there's certain people where people kind of know where it happens and you never know if that's the case for you or not or or if people are just like, man, I don't think that person deserves it. So, you've been working at Microsoft for over 17 years now, and one of this tweets that you have is talking about big company tips that you have. And it says, "Before you change roles, ask when the last reorg was. What's the thinking behind that advice?" Big companies are are a machine. And I remember someone telling me really early on that league and maybe it was it was tongue and cheek. It was like when you're when you're when you are uh an executive vice president at at these companies or a CVP or whatever you are, you show that you're doing something like it's like motion like reorgs are motion and motion means that you're you're changing stuff and the only thing constant is change in these big companies like there's always a reorg plan. There's always there's always a reorg coming there's always a reorg that just happened and you're trying to figure out in between the reorg moments what were like who were the leaders what was the the impetus what caused it to happen I mean you can never know when next one's coming but learning about the previous one is super I think it's super important just to understand like where we are where where you would be heading right in in that dimension might or had a big reorg like recently previous meta person now runs um Jay, you know, runs um my my my or I think it's super important to know that because it helps you figure out what the purpose is now, right? If if it just happened, it tells you a lot about where the org is heading, where the team is heading, where things are going. Um, I think it's easy to kind of change teams or move around and not think about the overall place that org is going, but then Microsoft is big enough that is like every new org is a whole new company. So, it's definitely worthwhile trying to figure out where what the goals are of that or where it stands now, what happened last time kind of thing. I bet I I I tweeted that after either talking to a mentee um who had been reorked and I think they had been like four in a row or something like that crazy um or or it happened to me. But yeah, I see. So you're saying you should read the behind the scenes of the reorg and what that means for your career in the future. Oh yeah. Oh yeah. I heard someone say something to me recently that was really good advice. was when you're looking to change jobs, don't think about the things you love because they'll be easy to do. Think about the things you hate. Like what what can you not stand about like working in the area or an environment or whatever it is and go look for that. If you see that, that'll be that that'll be the thing that will be hard to to get around or work through. Let's say you hated open space and you wanted a closed office. if the company was open like don't go to the company that is open skit because like then you'll you'll be unhappy right um there there are better examples that are probably more toxic about like people but that's a simpler um way of describing it you've been at Microsoft for a long time your entire career even including your internships I'm I'm curious what has kept you at Microsoft as long as you've been yeah every every time yeah I I think about this myself a lot like what keeps me here and I think I am part of a generation of millennials who broke the curse of like our boomer parents like trying to stay in the same place forever. I have a lot of friends that jump jumped their own and they got paid for it and it was really good for them in their careers. I want to say I maybe didn't take the same path and it it kind of worked out. Um I had a couple of times where probably the most impactful time where I maybe almost left was when I was senior my boss left and went to Twitter preip at Twitter and a year in she tell she pings me and tells me to come like go interview at Twitter and I actually interviewed at Twitter and at GitHub. It's funny and Twitter um at the same time and I got to I got both offers and the offers were pretty good and it was the probably the first time in my career where I was like at a crossroads because my career had been going fine. I was working on signal. I was like on the up and up but then here's this offer that like seemed a lot better and they're pre preipo companies like should I should I go? Um, and there there was a lot of deliberation as to like if I should go or I should stay or not or whatever. Um, I ended up staying and it worked out. But I will say the morning like Twitter went public. Mhm. Instant depression. I was depressed for like a week. Oh my god. Oh my god. What What kept you at Mark? cuz it sounds like those offers were better than what you were making at the time. Yes, they were. They were. So, when I I I got they they countered and the counter was fine. It wasn't like inc. I mean, I guess looking back now, it was pretty good, but it was it was fine. Um, but they they had me talk to like our executive vice president and he was like, "You're going to be like a distinct engineer in like five years." I mean, he definitely oversold But I was I think maybe for me it wasn't just the money that that made me stay. It was like I had been working on something I had built that was impactful that was like built permissionless. Um I had I think at the time I had been getting a lot of autonomy at Microsoft and leaving would have been like starting over. Um, probably one of the one of the things that people don't talk about when changing roles or leaving or getting a better offer somewhere else is you build up a network, a network of people, a network of of, you know, a track record. I can kind of work on what I want to work on at the at the moment. At that time, maybe not so much, but I think I had been given more more autonomy. And when you're weighing the the like should I should I stay or should I go is like money is one thing um the other is like are the people that are people good not just good engineers but like good people that that that you want to work with so there's the the people aspect the money aspect the network aspect all these things kind of matter in in the soup and I think I stayed because at Microsoft I had been getting my fix of working on a new thing every couple of years. Every if on my LinkedIn there's like a new project every two years and that was like by design. Um I think it helped me not get bored or not like kind of like be um I didn't I didn't feel the need to to go somewhere else to to do I want to do because I felt like I could do it at Microsoft. So that that kept me here for this long. Um, I mean, I I won't say that I hadn't thought about leaving every now and then. It does it does come into my brain every now and then, but I think so far the people um the pay for me is is fine. Um the the people that pay the project, the impact I get to have working on what I work on is a is a big big thing for me as well. Do you think that if you had a mentee today facing the same decision, so they're they're at Microsoft and they they're doing well and then they have a you know preIPO open AI offer or something better than what they have now. Well, would you tell them you should stay at Microsoft or would you say you know maybe go with the risky thing? I would tell them to go. So, fun story, I actually had a mentee who got an offer from a separate a different company, but they weren't in a place where they could do their best work. So, the combination of the offer plus that I was like, "You have to go." I said, "They're going to counter, but you have to go. You can't stay here. You You should go. You should go." If I had that for myself, maybe I would have I would have been gone. I would have been gone for that. U you had this interesting tweet on um job hopping that I thought was maybe relevant now which is that you said once in your career you should work on a project long enough to see the long-term impact of your decisions. It's a humbling experience. That's a good one. So I it could be better for long-term growth uh in some cases. Yeah. So what I would say so that one that tweet was inspired by my career has always been this like work on a thing and move on. I would still have ties to the thing I worked on help people that are working on it now whenever things go wrong or whatever. But the the thing that I'm I have worked on for 10 years net core was the longest I've ever worked on anything in my career ever. Ever. And I think it was a good it was a good change because it really helped me appreciate like deciding to do something in the first two years and then holy crap seeing the impact of that decision whether it be bad or good, right? Um it it gives you a whole new skill set um perspective on how to make decisions. And for for some things it's it's obvious and you can say okay well we didn't understand at the time the scope or the scenario or whatever else but things that didn't seem important became important. Um one of the jokes that I make about you know when you work on something for 10 years all the small issues you thought were small that were just like we can do it later will become big issues at some point. Like somebody will hit everything that you punted and it it it happened. it it all of it happened. Um, and I thought like I think maybe if you think about 10 year projects, 20 year projects, who knows if it's good for career growth, maybe not like maybe if you work on the same for 20 years, like oh my gosh, not not great. But it'll teach you a different skill set that is like you get to understand the implications. You get to understand, you know, if you were going to build the next next version, you would have much more insight into like what you messed up. It's really hard to appreciate what you messed up when you like do a thing and you you leave. You  V1. All good. New project. But I don't I don't fault anyone for like doing both things because I've done both too. Yeah. I could see it better for I guess developing judgment. But I and I could also see it being you know imagine a career that's a leg of jumps that could and if assuming every jump is higher than the other, that person's probably gonna have a lot of career growth. But if all the projects they start just kind of go downhill once they leave, I wonder what it does for their pattern recognition and judgment. Yeah. Yeah. Yeah. Exactly. It's funny. I I told someone I don't know exactly how to how to describe the ingredients that make up a successful project, but I can tell you when I'm working on one versus when I'm not. And that is built up over time and experience and like seeing which things work out, which things don't work out. Um, it's kind of fine-tuning, I guess, an internal model in my head. Okay, this this has the smell of something that that can be successful versus not. And there are some things here that I'm seeing that work out well and some things that are not working well. And yeah, coming to the the end of this, I I kind of want to ask you some um just high level reflections and things. One one thing I'm curious because you're so high up at Microsoft at this point and you've been there for so long too. I know the common perception is preachy Microsoft was very different from post SATA Microsoft at least in terms of stock performance. Um did you notice anything internally like the culture shifting when Satia became CEO? Huge. I mean, I I always tell new hires that it's really hard to think about the culture shift between Sati and Balmer because you I lived it, right? You like I was in it and it's really hard to see the big jumps from where we are now to where we used to be. Um because it literally happened gradually. It was like things were rolled out and there's a lot more cons the culture just changed completely, right? Probably one of the biggest ones that I I noticed because I I experienced this when I joined there was teams competing on the same end end goal like two different teams that I think I think historically there there's been a Microsoft used to do this thing where two end teams could work on the same end state and then one would win and the other who who knows what would happen this reor something else um there was a big focus on collaboration over like just like being the first the first to do something. I never experienced it myself on my team, but I definitely wor with teams who you could tell were kind of building the solution before knowing what the problem was. There's a lot of that um that I saw when I was and I was I I was an observer. I was like very early in career like observing how people interacted and culture- wise and just the way people interacted changed like meeting culture like how means would would appear like emails things that seem so obvious in hindsight like if I look at how people would communicate in meetings now versus emails versus how I used to work like remote friendliness versus like how people work in teams like I I remember being in a meeting and someone raising their hand on teams and I was like raise your hand for talk like what this is not Microsoft because I I had I had grown up in a culture where you would just talk right you just talk you don't you wait for a pause and you talk you don't you don't raise your hand to talk or you don't like maybe it sounds crazy a lot more consideration for everyone else it wasn't just what's it called um highest paid person's opinion I think that's that's kind of how Microsoft felt like when I joined like if you were in a meeting with people that are very senior um hard to get a worded sometimes and if and if the if the most the most senior person was loud and like aggressive like people that people that didn't think that way in the moment would not get safe. Wow. I think one of the big changes was in like how we communicated as a as a company as a team. collaboration became a thing that was part of your review. So like if you were not using if you were not trying to use things that other teams built like you were dinged for it. If you were going to copy and create a a clone of someone else's thing because you're special now the incentives push you in the opposite direction. And I think that's probably the most impactful change that and that and the style of comms was like a big change that I observed just like existing in those time those times. I see. Okay. So the culture shifted through performance incentives and maybe just some of the stuff that was messaged top down. Yeah. Yeah. and and and the behaviors that were that were being modeled by like the leaders like literally in meetings, people raising their hands, people calling people who haven't spoken. Like imagine if you're in a meeting and there's someone really quiet that has really good thoughts, but maybe they don't they don't like to speak up in meetings, pulling it out that person in in the meeting. Like I remember when that first happened, I had never seen it before. I had never seen someone say, "Um, hey Ryan, you're quiet. You've been quiet the whole time. What's your opinion on this matter?" Like that. There was just people talking and then you would leave. Now there's a lot more. It's much better, much more considerate for others. Um, a lot less people screamy, shouty. I was in like really early in my career, people were like shouting. And I remember thinking to myself like, "There's normal. Am I going to have to shout at some point?" There's a famous XKCD comic about the culture at different companies. And if I recall correctly, the Microsoft one is a drawing of people with guns pointed at each other. The guns. Yeah. It's so funny. I think that picture is funny. And it's definitely not guns at all. It went from guns to ambivalence like don't bother me to collaboration. So I think that progression is probably the biggest change in between Bomber and Satia. the the joke about the guns to I don't have a gun at you, but you know, as long as you aren't going to like disturb disturb my my situation, like we're good to go. You're over there, I'm over here. It's all good to collaboration where like we incentivize collaboration. You get rewarded for collaboration, though. So, I think that was the biggest the biggest shift and change I saw in the culture. When you look back on your your career so far, do you have any major regrets that people can learn from? It's a good question. Major regrets. Major maybe not. I I would say early in my career, I would say super arrogant. I I was I was very arrogant. Um you could probably find my GitHub if if you if you look at some of the GitHub comments and the tone, I would say I was lacking some empathy in a bunch of different places. One of the big shifts that I think my brain made over time learning how to build teams and kind of impact through others was like patience. Patience, empathy. Um those two traits helped help a lot with like growing teams and growing like influence and people, right? It's not just because you're right. Being right means nothing. It's just not important, right? Being right is like one of many things. Um, and I I used to want I used I used to like I'm right therefore everything else is like we'll follow along from there. And I think learning over time that this that doesn't really matter as much because there's a lot of shades of gray when you're in software engineers. This is not the most important thing. So I think early in my career I was very much like yeah I'm right like I don't really understand where we're having this. Why are we still talking about this thing? I'm right. Um, and every now and then it'll creep out, but like it I think I I have a lot more selfawareness now whenever that's not the most important thing for the for the moment, even though it's like a thing still. I learned over time how to dial it. Um, but in general, yeah, maybe the fact that that I didn't leave and go to Twitter because I would have gotten like a ton of money as a senior engineer. Um, or go to or go to or go to Facebook. I I had a bunch of opportunities. I just didn't I didn't take it super early on. Okay. One regret that I do have that is not directly career related, but like maybe in the same ballpark. Um I had a friend in 2008 who sent me a message. He was going to do a Bitcoin company. I was like, I don't know about this crypto thing. Dude has so much Bitcoin though. What a what? What? Oh my god, that's so funny. Yeah, that that one. Um, when you look back on your career, what was your work life balance like throughout? I used to answer this by saying um there was no balance. There was just like work hard, play hard kind of thing. I would say now someone told me recently that work life balance isn't about 9 to5 and stopping. It's about what things give you energy and what things drain energy from you. So early on in my career, I was working all hours. I still do because I enjoyed what I was doing and maybe a little too much. So I would just like have to dial back every now and then, but I I enjoyed what I was doing. So I work a lot like at work. I have to work like on different things. Um because programming for me was not just my job. It was like my passion. So I I never forget one one summer I came back from vacation. I started making games just like for fun. Um and I learned a lot about making games. I took that into things at work that I was doing and more stuff. And for me it was always I just love building stuff. So I want to build more stuff. Um, what I would say is draining now is like meetings that just don't feel as though they have a purpose. That if I were in meetings all day and I felt drained after work and I kept doing more work, that to me would feel like no balance because I I want to do stuff that isn't meetings, but I'm I'm not doing that during the day and then then I'm going home after hours doing more work. That is like burnout quality. So, I would say like balance was always I work a lot. I'm absolutely overcollic. For me, this I I love this career. It's it's it's kind of insane that I I get to code for for a living. So, I I see that as like a privilege that I'm going to keep doing until I can't do it anymore. Yeah. I think when I look at a lot of people's careers who have been, you know, as successful as you, they that's one of the unfair advantages I see almost everyone has is they have this innate intrinsic motivation. So they they work a ton of hours just non-stop and and a lot of like like you a lot of people love it and that is such an unfair advantage. It is. I I saw um one of Andre Karpath's talk he said $10,000 to get good at anything and maybe it's not true but I early in my career and maybe even now I wanted to become a very good software engineer right and people always ask me hey what book did you read what did you what what did you do to become a good software engineer and I'm like I wrote and read a lot of code like just anything you can get your hands on and there's so much more code. No, there you can read, consume, and write. Um, and I'm not sure if it's good advice, but what I know is that I did not get good at software engineering or building building a programming, whatever you want to call it, from like seeing something online or reading a a blog post or it's like just do it. Like build everything. databases, distributed systems, games, like every everything you build will teach you a new skill that you don't even know you have until later on. Um, my GitHub is a graveyard of projects. I just build stuff and put it on there. It's like I want to learn how to do um multi and forget I I tried to build a fighting game when I was 16. I wanted to build Street Fighter. So, I got all the art from somewhere online. I started to build a Street Fighter clone. And it wasn't for any real purpose. It was just to learn how to build a fighting game, right? How do you make key combos work and like how do you make that stuff work? Um, and that pattern of like I need to know how this thing works has served me like to this day, right? Like I need I need to understand how the thing I'm doing works. How do I get this thing to be on that thing? Um, yeah. So, I I love what I do and I think that has helped me um do it more and get better at it. And then last question, if you could go back to yourself when you were just graduating college and entering the industry and give yourself some advice, what would you say? Oh my god, negotiate your freaking salary. When I got my job, I did not know that I could even negotiate. I would have gotten more offers. I mean, looking back, it doesn't matter right now, but if I was going to talk to a new college hireer getting a job, like get multiple offers and like bump up that money, bump it up, bump it up. Um, I watched my friends do it and I was I was just like in shock. Like, I'm from Barbados, I go to the States, I get an internship, I get a job, they give me the most money I've ever seen in my life. And I'm like, "Thank you. Thank you. Thank you for the money. I have my job. To hear kids talk about, yeah, I I said no or I said I'm going to go check out Google first or Facebook and get offers and I was just like what? And that just became normal. Like that became like the norm and it just it blew my mind. I couldn't rationalize what was happening. I I do think it's definitely worthwhile doing that. I I've seen kids do it so well. I'm like this is so impressive. This is just like this kid is is telling us no. and and and I've been I've been like on enough hiring committees now to to hire interns and I'm watching the back and forth between this kid and the recruiter and I'm just like this kid's a genius bumping up this awake. It's so amazing. Mass respect. Awesome. All right. Well, thank you so much for your time, David. Really appreciate it. Um is there anything that you want to say now or maybe where can people find you? Uh, I am available on X, Discord, um, Blue Sky. Are those the mains now? Are there more? I mean, there's LinkedIn, but I don't know if you use it. LinkedIn. LinkedIn. Yeah, you're right. LinkedIn. It's funny. LinkedIn has become a social network is the most bizarre thing ever. I am on all these things. Tweeting about net and AI and all kinds of programming stuff. Awesome. I'll put it in the links in the show notes. Thanks so much, dude. Awesome. Thanks for listening to the podcast. I don't sell anything or do sponsorships, but if you want to help out with the podcast, you can support by engaging with the content on YouTube or on Spotify. If you want to drop a review, that'll be super helpful. And if there's any guests that you want to bring on to, please let me know. I feel like sourcing very senior IC's, there's no wellstudied list out there on Google that I can just search this up. So, if there's someone in your org or at your company who you really look up to and you want to hear their career story, let me know and I'll reach out to