hello everyone and welcome to software architecture Monday my name is Mark Richards and in this lesson we'll talk about event-driven architecture specifically events versus messages you can get a listing of all the lessons I do in software architecture Monday through my website at developer to architect.com lessons back at lesson 165 I talked about event driven architecture uh some of the ways it works and why you would use it and choose not to use it what I'd like to do in this lesson is to kind of take one step deeper and take a look at the difference between events and messages and when you would use each within event driven architecture the question about whether an event is different than a message and the answer is in fact yes it is we tend to use use these terms interchangeably but there are some key differences between these um the biggest difference is this an event is something that you're advertising that has already happened in other words I just placed an order um so it's it's a state change it's something I did that I want to let you know about whereas a message is more of a command or a query in other words I need you to do something for me or I need some information from you uh good examples are apply a payment for this order or give me the payment type so this is the first key difference between an event and a corresponding message the other difference has to do with the channel itself typically not always but typically events use publish And subscribe messaging using topics uh streams uh notification services and these sort of things whereas a CU or a message utilizes more of point-to-point messaging using Q's uh messaging services like sqs for example so this is another key difference now I say typically here because we can certainly publish an event to a queue knowing that only one receiver is going to act or react to that event but typically uh this is the alignment between events and messages uh the other difference has to do with ownership of both the channel and also the contract you see with events that message channel is essentially owned by the sender the one publishing the event um so in other words in this particular case order placement would own that event Channel meaning it owns its name uh it controls where that's located or as with messaging it's exactly the opposite the receiver is the one who owns that channel and if you want to talk to me you have to conform to that Q name I I own that whole name I can control its location and that ownership extends also to the payload itself and the corresponding contract because with events that contract is owned and maintained by the sender so I am broadcasting something I did this is the contract and if you're interested in responding to that event then you have to conform to that contract whereas with messages it's exactly the opposite uh the receiver of that message is the one who controls and maintains that contract so if order placement wants to communicate with with payment for example in this in this example order placement would have to conform to whatever contract payment says so these are four key differences between events and messages and you can see they they are um very much different so this question came up I believe it was actually in lesson 165 uh in the comments um when should I use events versus messages in event driven architecture and I really really enjoyed this question because it allowed me to talk about the differences between events and messages but also very interesting question so here's a typical event driven architecture and notice that we're placing or publishing events things that happened notice another difference here an event it's always stated in past tense so uh order is placed is anybody interested in that it turns out that payment notification and inventory are all interested in that event and and all these things happen at the same time um payment says well I appli to payment and I'm just letting everybody know and fulfillment says well I need that information because I can't fulfill an order until it's paid and in order fulfillment fulfills that well notification and shipping are interested in that once it's shipped notification is interested in that as well and so this is a very typical um model of event driven architecture where notice we're using all events let's think about some use cases where we might want to use messages here for example maybe order placement says I know we're all asynchronous and I know that this is all fire and forget messaging or or events but I need to know that that payment was applied Maybe I've got a state change or uh some processing I need to do well this is all highly decoupled so this might be a case where I might maybe use a message for async notification so that payment directly talks to water placement through a queue with a message saying yes um I'm confirming that I applied that payment that's one possibility for using mess within event driven architecture but think about it is there another way order placement can know that the payment was applied and in fact it does it does not need to use this async notification but rather it could just simply subscribe to the payment applied event so in this case it's not necessary to have that async notification because I can certainly just subscribe to an event to let me let me know that it happened it's like H so I started thinking what are some other use cases that we might want to use messaging and there is in fact one where we do in event-driven architecture and that's to control the order the processing order you see here when orders placed all three of these happen at the same time but maybe what we want to do is to control the order in other words once I place an order payment is the first thing that needs to happen then inventory then we notify the customer now certainly I can try to do this by subscribing to particular events but that might be a little complicated so this is one area where in instead of that event being published order placement Now controls the processing of that so order placement May in fact send a message to payment saying apply the payment notice now this is a different color coding but regardless of the color notice that this is a command apply the payment it's still asynchronous it's still fire and forget well eventually when the payments applied payment sends an async notification back to order placement on a separate Channel saying okay acknowledged yep payment is applied then order placement can say Okay second thing that needs to happen is to adjust inventory notice it sends a message pointto Point specifically to inventory saying now adjust the inventory inventory says okay separate Channel asynchronous still fire and forget to let order placement know yeah that part done and then it orchestrates the third process which is to notify the customer so this might be a use case to control the processing order in Fairly complex event-driven architectures where we don't re want to rely on trying to rearrange subscriptions in the thought that multiple things can possibly happen but really control that processing and direct these so anyways this was one um possibility I thought of I thought it was a great question but typically typically most of the time we use events with publish And subscribe and so anyways just a kind of a short lesson to really dive a little deeper into event driven architecture so um this has been lesson 175 events versus messages and thank you so much for listening uh stay tuned in two more weeks for the next lesson in software architecture Monday