hello everyone and welcome to software architecture Monday my name is Mark Richards and in this lesson number 202 uh we'll take a look at some frequently overlooked architectural characteristics uh you can get a listing of all of my lessons and a catalog of all of those through my website at developer to architect.com lessons I've talked a lot in software architecture Monday about architectural characteris ICS these are the Iles or some people call these nonfunctional requirements or nfrs system quality attributes uh lots of names for these the question is there's so many of them um how do we know um which ones we should have and which ones are really important and what I want to do is really focus on showing you ones that are usually overlooked by Junior Architects and uh this was a question I actually did get um and I thought it would actually make a really nice lesson so let's start though by saying how do I know which characteristics I need for this system and then we'll look at some that are usually um overlooked um well we can actually obtain these characteristics find what characteristics we need uh through the domain uh for example if we're building a new stock trading system uh we know it has to be fast really low latency and also data Integrity is probably really important so I don't need requirements to understand what the architecture needs to support however sometimes a characteristics we do end up getting from requirements uh supporting 20 to 200,000 concurrent customers is all about elasticity perhaps most of these come from just listening to the business and understanding the business concerns the business drivers and business needs such as aggressively expanding our business which just screams of scalability and such but let's ask the question though which architectural characteristics out of all of these and going through this process of determining which ones are important are most frequently undervalued or overlooked by new Architects and there's four in my experience that fall in to this category and the first of those is in fact feasibility this one is probably the most frequently undervalued and overlooked that I I see and when I talk about feasibility I'm talking about tight time and budget constraints but feasibility also has to do with the skill set of the development team and their overall experience and as Architects we may come up with the most fantastic solution but we fail to question whether it's act actually feasible given the time constraints budget constraints and also constraints regarding our team their availability their skill set their overall experience so feasibility really is all about understanding those kind of constraints now the next one I actually created a lesson in software architecture Monday on and that is is observability as a matter of fact uh Neil Ford and I coined fallacy number 11 of distributed computing and uh fallacy is of course something that we believe to be true but it's not and that fallacy is that observability is optional and it's not and what I have observed is that observability will be taken into account but it's usually towards the end of the kind of initiation or the initial creation of an architecture or kind of bolted on at the end and um well that's not really effective because especially in today's world and especially with distributed architectures uh we need observability to be able to understand are we achieving our goals as we make changes to our architecture are things getting better or worse over time and this is all about supporting ing architectural Fitness functions whether they be from tools or whether they be ones that we write ourselves architectural Fitness functions are ways of actually measuring architectural characteristics but in order to measure we have to be able to First observe so observability I can't stress enough shouldn't be treated as a last minute Bolton but rather a first class citizen one that I see grossly undervalued in my travels another characteristic that I also see overlooked especially by new Architects is that of agility now agility I'm going to Define here as the ability to respond quickly to change and what we're really talking about here is time to Market or what sometimes is called speed to Market how fast can I get changes out to our customer customers and Agility really involves four main types of characteristics the first is maintainability uh this is the ease of being able to locate and change code and find where a problem is but that's only part of the agility equation because the next is testability and this is about the ease of and completeness of testing something we can track because as we move faster are we introducing more bugs something I can actually track errors to see if they're increasing or in fact decreasing uh deployability is really about three things when it comes to agility um it's about the ceremony involved with deploying our software it's about the uh overall risk and also the frequency of deployment something that directly impacts uh speed or time to Market and there's another character istic that kind of is associated with agility and that is all about evolvability how easy is it to evolve the architecture and to support additional functionality additional kind of features or new lines of business part of what relates to agility is also measuring and understanding the rate of change within your organization within the system or product that you're working on and these kind of equate together and sometimes are in fact overlooked until we're well into production and all of a sudden start experiencing a rapid change and also demands to change faster there's one more architectural characteristic that I see sometimes overlooked not necessarily over or undervalued but largely overlooked and that's the importance in architecture lecture of modularity now modularity is kind of about breaking up functionality into chunks pieces granularity is about the size of those pieces and when we think about modularity especially within architecture we start to think about distributed architectures um microservices perhaps has the highest level of modularity out of any architecture style in existence just due to the fine grained single purpose nature of each service um event driven architecture Eda also supports high levels of modularity as does the service-based architecture with domain Services however I want to make a very important Point here architectural modularity is not only restricted to distributed architectures we can support modularity in monolithic architecture Styles such as the modular monolith where this architecture is domain partitioned by functionality and hence its name modular monolith um also the micr kernel architecture where it gets its modularity through independent plug-in components that may provide additional functionality or additional kinds of configuration so I very much loved this question and got excited about it um because there are some um undervalued and overlooked architectural characteristics and I'm hoping that this video sheds light on at least these four so that we don't forget about these when we're getting excited about a lot of the operational characteristics that we're focusing on things like responsiveness and scalability well these also matter a lot so this has been lesson 202 frequently overlooked architectural characteristics thanks for listening and stay tuned in two more Mondays for the next lesson in software architecture Monday