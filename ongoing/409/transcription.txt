hello everyone and welcome to software architecture Monday my name is Mark Richards and in this lesson number 167 we'll take a look at the difference between architecture and Design you can get a listing of all the lessons I do and software architecture Monday from my website at developer2architect.com lessons so is there a difference between architecture and design and it turns out that there is however here's something very interesting the difference between architecture and design is not a binary decision but rather a spectrum of decisions that lie between architecture and Design so let me show you some criteria that you can use to determine where in this spectrum your architecture or your decision actually lies the first criteria is whether your decision involves some structural aspect of the system or is it merely about the source code now when I say the structural aspect it's the organization of the source code into components and the coupling between those components or in distributed architectures it might need to be the deployment units uh the communication between those deployment units as well as the communication and types of data and databases you have these all form the structural aspect of the system another criteria that you can use is whether the decision is strategic or Tactical now one way to determine whether it's strategic or Tactical is to say for example how many people need to be involved in this decision and how long is it going to take to make this decision things that are strategic tend to involve a lot more people and take weeks to potentially months to make the decision whereas things that are tactical in nature can be decided with one person maybe two people within an hour or a day and so it's a good way of determining whether something is strategic or tactical the other kind of criteria is whether the decision involves a lot of effort or fairly straightforward minimal effort the longer or larger or higher the effort more architectural that decision probably is and finally the last criteria is about the trade-offs everything in software architecture has trade-offs every decision we make has trade-offs pros and cons what's the significance of those trade-offs is it fairly significant or less significant significant trade-offs usually are more on the architecture side of the spectrum whereas less significant trade-offs usually more in terms of design so you might be asking Mark why does this really matter and it's two reasons I can give you the first is that this helps determine who has the responsibility for making the decision now both here the architect as well as the development team should always collaborate to get additional information to get thoughts ideas opinions maybe there's something we're missing so I'm not really talking about the collaboration piece but really after that collaboration who ultimately has the responsibility for that decision and then second is knowing when you make a decision what's the overall impact things that are architectural in nature tend to have a higher impact than ones that are design related so with all this and nine now let's actually take a look at some examples I'm going to show you two extreme examples and then we'll see one that's right in the middle of the spectrum so for example right here what about choosing to use microservices for the new system and this is an architectural style we saw a couple of lessons ago well let's go through our criteria to see whether it's architecture and design you see because you might say oh well that's obviously architecture but why is it obviously architecture is choosing to use microservices more about the structure of the system or more about how we code and in this case it's definitely more about the structure of the system it's an architectural style that we happen to be using it's the decision to use microservices more strategic in nature or is this a quick tactical decision how many people are involved and how long will this decision take you might guess uh weeks to months and a lot of people are going to want to be involved in this decision so it tends to be more strategic up the level of effort High effort or low well those of you who have experienced microservices know this is pretty high effort and finally what about the trade-offs are there significant trade-offs or less significant trade-offs and here it turns out there's a lot of significant trade-offs with microservices for all the superpowers we get with great fault tolerance great things about scalability elasticity we pay the price with high cost very complex systems and also sometimes a lack of performance these trade-offs tend to be fairly significant especially when we start to talk about physical bounded contexts and data and it's like okay you've convinced me they're significant can see that is why this is on the far end of the architecture side of the spectrum but let's do a different kind of decision you choose to use the strategy design pattern for a part of your code well is this structural in nature or does this have to really do with how we write source code and clearly this is how we organize and write our source code in class files is this a strategic decision that involves a lot of people and a lot of planning and Analysis or is it fairly tactical something you can make a decision in a hour or less well it turns out this is a fairly straightforward decision it's fairly Tactical what's the level of effort here compared to something like building out a microservices ecosystem has fairly low effort and finally there are trade-offs but how significant are those pros and cons of choosing to use the strategy design pattern in it and it turns out they're less significant and so this is why this falls on the far end of the design Spectrum a development team or a developer would have the responsibility for making this the decision whereas if you saw with the micro Services piece an architect really should have that responsibility for that decision even though they should always collaborate with others such as development teams business stakeholders and and so on well these two were quite obvious but let's take a look at another kind of decision and this is choosing to break up the payment service into separate Services one for each payment type and so we take credit cards gift cards Reward Points uh World pay all these kind of different payment methods so instead of one Consolidated single service we're going to choose to break it apart is that architecture or design most of the decisions that you make will fall in this category those gray areas so let's use our criteria to see if we can help us decide where in the Spectrum this decision fits is this structural or code well we're going to have to move a lot of source code but we are creating additional deployment units and possibly more communication points between those so this is more on the architectural side of the spectrum is this a strategic decision that involves a lot of people and a lot of time or is it more Tactical well here it's neither of those extremes but it's probably more of a tactical decision and we can make this decision fairly quickly with only a few people what about the level of effort to break apart this service we're going to have to create new deployment units possibly break up the data so that might be a consideration but largely we're moving a lot of source code around to different projects or workspaces so it's more on the low effort side of the spectrum well you can start to see we're getting kind of close but we've got one more criteria about the trade-offs are they significant or less significant well think about it if we break up that payment service we may have communication between those which may impact performance if we can pay with multiple payment types we might be impacting data Integrity because now we have to have a distributed transaction but we get much better agility and extensibility and evolutionary architecture to add additional payment types so we're much better agility I would say those trade-offs are fairly important and fairly significant we could potentially derail a part of the system based on this decision and you can kind of see balancing these it falls right about here in B which is more on the architectural side of things and this is where a lot of your or I should say most of your decisions will lie so you can see by using these criteria we can kind of use this slider bar to really determine should I as a developer be making this decision or is this something an architect should probably make and conversely me as an architect should I be making certain decisions or defer those to a development team and this kind of tool helps avoid stepping on each other's Toes or making a decision that we probably shouldn't have the responsibility to make so this has been lesson 167 uh the differences between architecture and design and kind of a little tool that you can use to go through this criteria to really determine whose responsibility is this decision even though we do collaborate who should have the ultimate responsibility and how important is this decision in terms of the overall impact of our system so thank you so much for listening and stay tuned in two weeks for the next lesson in software architecture Monday